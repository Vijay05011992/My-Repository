import React, { useState, useRef } from 'react';
import { Download, Upload, Play, Pause, FileText, AlertCircle, CheckCircle, Globe } from 'lucide-react';
import Papa from 'papaparse';

const eMM11DataExtractor = () => {
  const [leaseIds, setLeaseIds] = useState([]);
  const [isProcessing, setIsProcessing] = useState(false);
  const [progress, setProgress] = useState(0);
  const [results, setResults] = useState([]);
  const [logs, setLogs] = useState([]);
  const [currentProcessing, setCurrentProcessing] = useState('');
  const [serialRange, setSerialRange] = useState({ start: 1, end: 100 });
  const [delay, setDelay] = useState(2000);
  const [backendUrl, setBackendUrl] = useState('http://localhost:3001');
  const [isTestingConnection, setIsTestingConnection] = useState(false);
  const [connectionStatus, setConnectionStatus] = useState('not-tested');
  const fileInputRef = useRef(null);

  const addLog = (message, type = 'info') => {
    const timestamp = new Date().toLocaleTimeString();
    setLogs(prev => [...prev, { message, type, timestamp }]);
  };

  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      Papa.parse(file, {
        header: true,
        complete: (result) => {
          const extractedLeaseIds = result.data
            .map(row => row['Lease id'] || row['Lease_id'] || row['lease_id'] || row['Patta No & Firm']?.split(' ')[0])
            .filter(id => id && id.trim())
            .map(id => id.trim());
          
          setLeaseIds(extractedLeaseIds);
          addLog(`Loaded ${extractedLeaseIds.length} lease IDs from file`, 'success');
        },
        error: (error) => {
          addLog(`Error reading file: ${error.message}`, 'error');
        }
      });
    }
  };

  const addManualLeaseId = () => {
    const input = document.getElementById('manualLeaseId');
    const leaseId = input.value.trim();
    if (leaseId && !leaseIds.includes(leaseId)) {
      setLeaseIds(prev => [...prev, leaseId]);
      input.value = '';
      addLog(`Added lease ID: ${leaseId}`, 'success');
    }
  };

  const removeLeaseId = (index) => {
    setLeaseIds(prev => prev.filter((_, i) => i !== index));
    addLog(`Removed lease ID at index ${index}`, 'info');
  };

  const testConnection = async () => {
    setIsTestingConnection(true);
    setConnectionStatus('testing');
    
    try {
      const response = await fetch(`${backendUrl}/test`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const result = await response.json();
        setConnectionStatus('connected');
        addLog(`Backend connection successful: ${result.message}`, 'success');
      } else {
        setConnectionStatus('failed');
        addLog('Backend connection failed', 'error');
      }
    } catch (error) {
      setConnectionStatus('failed');
      addLog(`Backend connection error: ${error.message}`, 'error');
    }
    
    setIsTestingConnection(false);
  };

  const fetchRealeMM11Data = async (leaseId, serialNumber) => {
    const fullId = `${leaseId}${serialNumber.toString().padStart(5, '0')}`;
    
    try {
      const response = await fetch(`${backendUrl}/fetch-emm11`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          eId: fullId,
          leaseId: leaseId,
          serialNumber: serialNumber
        }),
      });

      if (!response.ok) {
        if (response.status === 404) {
          throw new Error('eMM11 not found');
        }
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      
      if (data.success) {
        return {
          eMM11: fullId,
          leaseePermitHolder: data.data.leaseePermitHolder || '',
          mobileNumber: data.data.mobileNumber || '',
          serialNumber: data.data.serialNumber || serialNumber,
          lesseeId: leaseId,
          leaseDetails: data.data.leaseDetails || '',
          tehsilOfLease: data.data.tehsilOfLease || '',
          districtOfLease: data.data.districtOfLease || '',
          leaseAddress: data.data.leaseAddress || '',
          quantityTransported: data.data.quantityTransported || '',
          nameOfMineral: data.data.nameOfMineral || '',
          destinationDistrict: data.data.destinationDistrict || '',
          loadingFrom: data.data.loadingFrom || '',
          destinationAddress: data.data.destinationAddress || '',
          distance: data.data.distance || '',
          eMM11GeneratedOn: data.data.eMM11GeneratedOn || '',
          eMM11ValidUpto: data.data.eMM11ValidUpto || '',
          travelingDuration: data.data.travelingDuration || '',
          pitsMouthValue: data.data.pitsMouthValue || '',
          vehicleRegistration: data.data.vehicleRegistration || '',
          driverName: data.data.driverName || '',
          driverMobile: data.data.driverMobile || '',
          grossVehicleWeight: data.data.grossVehicleWeight || '',
          carryingCapacity: data.data.carryingCapacity || ''
        };
      } else {
        throw new Error(data.error || 'Failed to fetch data');
      }
      
    } catch (error) {
      throw new Error(`Failed to fetch ${fullId}: ${error.message}`);
    }
  };

  const processLeaseIds = async () => {
    if (leaseIds.length === 0) {
      addLog('No lease IDs to process', 'error');
      return;
    }

    if (connectionStatus !== 'connected') {
      addLog('Please test backend connection first', 'error');
      return;
    }

    setIsProcessing(true);
    setResults([]);
    setProgress(0);

    const totalOperations = leaseIds.length * (serialRange.end - serialRange.start + 1);
    let completedOperations = 0;
    const allResults = [];

    for (const leaseId of leaseIds) {
      setCurrentProcessing(leaseId);
      addLog(`Processing lease ID: ${leaseId}`, 'info');

      let foundRecords = 0;

      for (let serial = serialRange.start; serial <= serialRange.end; serial++) {
        try {
          setCurrentProcessing(`${leaseId} - Serial: ${serial}`);
          
          const data = await fetchRealeMM11Data(leaseId, serial);
          allResults.push(data);
          foundRecords++;
          addLog(`âœ“ Found data for ${leaseId} - Serial: ${serial}`, 'success');
          
        } catch (error) {
          if (!error.message.includes('not found')) {
            addLog(`âœ— Error processing ${leaseId} - Serial: ${serial}: ${error.message}`, 'error');
          }
        }

        completedOperations++;
        setProgress((completedOperations / totalOperations) * 100);
        
        // Add delay to avoid overwhelming the server
        if (serial < serialRange.end) {
          await new Promise(resolve => setTimeout(resolve, delay));
        }
      }

      addLog(`Completed ${leaseId}: Found ${foundRecords} records`, foundRecords > 0 ? 'success' : 'info');
    }

    setResults(allResults);
    setIsProcessing(false);
    setCurrentProcessing('');
    addLog(`ðŸŽ‰ Processing complete! Found ${allResults.length} total records`, 'success');
  };

  const downloadCSV = () => {
    if (results.length === 0) {
      addLog('No data to download', 'error');
      return;
    }

    const csv = Papa.unparse(results);
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', `emm11_real_data_${new Date().toISOString().split('T')[0]}.csv`);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
    
    addLog(`ðŸ“¥ Downloaded CSV with ${results.length} records`, 'success');
  };

  const getConnectionStatusColor = () => {
    switch(connectionStatus) {
      case 'connected': return 'text-green-600 bg-green-100';
      case 'failed': return 'text-red-600 bg-red-100';
      case 'testing': return 'text-yellow-600 bg-yellow-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  return (
    <div className="max-w-7xl mx-auto p-6 bg-gray-50 min-h-screen">
      <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
        <h1 className="text-3xl font-bold text-gray-800 mb-2">eMM11 Real-Time Data Extractor</h1>
        <p className="text-gray-600 mb-6">Live data extraction from UP Mining Department website</p>

        {/* Backend Configuration */}
        <div className="bg-indigo-50 p-4 rounded-lg mb-6">
          <h3 className="text-lg font-semibold mb-3 flex items-center">
            <Globe className="mr-2" size={20} />
            Backend Service Configuration
          </h3>
          <div className="grid md:grid-cols-3 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Backend URL</label>
              <input
                type="text"
                value={backendUrl}
                onChange={(e) => setBackendUrl(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                placeholder="http://localhost:3001"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Connection Status</label>
              <div className={`px-3 py-2 rounded-md text-sm font-semibold ${getConnectionStatusColor()}`}>
                {connectionStatus === 'not-tested' && 'Not Tested'}
                {connectionStatus === 'testing' && 'Testing...'}
                {connectionStatus === 'connected' && 'âœ“ Connected'}
                {connectionStatus === 'failed' && 'âœ— Failed'}
              </div>
            </div>
            <div className="flex items-end">
              <button
                onClick={testConnection}
                disabled={isTestingConnection}
                className="px-4 py-2 bg-indigo-500 text-white rounded-md hover:bg-indigo-600 disabled:bg-gray-400"
              >
                {isTestingConnection ? 'Testing...' : 'Test Connection'}
              </button>
            </div>
          </div>
        </div>

        {/* File Upload Section */}
        <div className="grid md:grid-cols-2 gap-6 mb-6">
          <div className="bg-blue-50 p-4 rounded-lg">
            <h3 className="text-lg font-semibold mb-3 flex items-center">
              <Upload className="mr-2" size={20} />
              Upload Lease IDs (CSV)
            </h3>
            <input
              type="file"
              accept=".csv"
              onChange={handleFileUpload}
              ref={fileInputRef}
              className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
            />
          </div>

          <div className="bg-green-50 p-4 rounded-lg">
            <h3 className="text-lg font-semibold mb-3">Add Manual Lease ID</h3>
            <div className="flex gap-2">
              <input
                id="manualLeaseId"
                type="text"
                placeholder="Enter lease ID (12 digits)"
                className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
              />
              <button
                onClick={addManualLeaseId}
                className="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600"
              >
                Add
              </button>
            </div>
          </div>
        </div>

        {/* Configuration Section */}
        <div className="grid md:grid-cols-3 gap-4 mb-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Serial Number Range</label>
            <div className="flex gap-2">
              <input
                type="number"
                value={serialRange.start}
                onChange={(e) => setSerialRange(prev => ({...prev, start: parseInt(e.target.value) || 1}))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
                placeholder="Start"
                min="1"
              />
              <input
                type="number"
                value={serialRange.end}
                onChange={(e) => setSerialRange(prev => ({...prev, end: parseInt(e.target.value) || 100}))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
                placeholder="End"
                min="1"
              />
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Delay Between Requests (ms)</label>
            <input
              type="number"
              value={delay}
              onChange={(e) => setDelay(parseInt(e.target.value) || 2000)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
              placeholder="2000"
              min="500"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Loaded Lease IDs</label>
            <div className="px-3 py-2 bg-gray-100 rounded-md text-sm font-semibold text-blue-600">
              {leaseIds.length} IDs loaded
            </div>
          </div>
        </div>

        {/* Lease IDs Display */}
        {leaseIds.length > 0 && (
          <div className="mb-6">
            <h3 className="text-lg font-semibold mb-3">Loaded Lease IDs</h3>
            <div className="max-h-40 overflow-y-auto bg-gray-50 p-3 rounded-lg">
              <div className="flex flex-wrap gap-2">
                {leaseIds.slice(0, 20).map((id, index) => (
                  <span
                    key={index}
                    className="inline-flex items-center px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full"
                  >
                    {id}
                    <button
                      onClick={() => removeLeaseId(index)}
                      className="ml-1 text-blue-600 hover:text-blue-800"
                    >
                      Ã—
                    </button>
                  </span>
                ))}
                {leaseIds.length > 20 && (
                  <span className="inline-flex items-center px-2 py-1 bg-gray-100 text-gray-800 text-xs rounded-full">
                    +{leaseIds.length - 20} more...
                  </span>
                )}
              </div>
            </div>
          </div>
        )}

        {/* Control Buttons */}
        <div className="flex gap-4 mb-6">
          <button
            onClick={processLeaseIds}
            disabled={isProcessing || leaseIds.length === 0 || connectionStatus !== 'connected'}
            className="flex items-center px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:bg-gray-400 disabled:cursor-not-allowed"
          >
            {isProcessing ? <Pause className="mr-2" size={20} /> : <Play className="mr-2" size={20} />}
            {isProcessing ? 'Processing...' : 'Start Real-Time Processing'}
          </button>

          <button
            onClick={downloadCSV}
            disabled={results.length === 0}
            className="flex items-center px-6 py-3 bg-green-500 text-white rounded-lg hover:bg-green-600 disabled:bg-gray-400 disabled:cursor-not-allowed"
          >
            <Download className="mr-2" size={20} />
            Download Real Data CSV ({results.length} records)
          </button>
        </div>

        {/* Progress Section */}
        {isProcessing && (
          <div className="mb-6">
            <div className="flex justify-between items-center mb-2">
              <span className="text-sm font-medium text-gray-700">Processing Progress</span>
              <span className="text-sm font-medium text-gray-700">{Math.round(progress)}%</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-3">
              <div 
                className="bg-gradient-to-r from-blue-500 to-green-500 h-3 rounded-full transition-all duration-300"
                style={{ width: `${progress}%` }}
              ></div>
            </div>
            {currentProcessing && (
              <p className="text-sm text-gray-600 mt-2 font-semibold">ðŸ”„ Currently processing: {currentProcessing}</p>
            )}
          </div>
        )}

        {/* Results Summary */}
        {results.length > 0 && (
          <div className="mb-6 p-4 bg-green-50 rounded-lg border-l-4 border-green-400">
            <h3 className="text-lg font-semibold text-green-800 mb-2">âœ… Real-Time Results Summary</h3>
            <p className="text-green-700 font-semibold">Successfully extracted {results.length} live eMM11 records</p>
            <div className="mt-2 text-sm text-green-600">
              <p><strong>First record:</strong> {results[0]?.eMM11}</p>
              <p><strong>Last record:</strong> {results[results.length - 1]?.eMM11}</p>
            </div>
          </div>
        )}
      </div>

      {/* Logs Section */}
      <div className="bg-white rounded-lg shadow-lg p-6">
        <h2 className="text-xl font-semibold mb-4 flex items-center">
          <FileText className="mr-2" size={20} />
          Real-Time Activity Logs
        </h2>
        <div className="max-h-80 overflow-y-auto bg-gray-50 p-3 rounded-lg">
          {logs.length === 0 ? (
            <p className="text-gray-500 text-sm">No activity yet...</p>
          ) : (
            logs.map((log, index) => (
              <div key={index} className="flex items-start gap-2 mb-2 text-sm">
                {log.type === 'error' && <AlertCircle className="text-red-500 mt-0.5" size={16} />}
                {log.type === 'success' && <CheckCircle className="text-green-500 mt-0.5" size={16} />}
                {log.type === 'info' && <div className="w-4 h-4 rounded-full bg-blue-500 mt-1 flex-shrink-0"></div>}
                <span className="text-gray-500 font-mono">[{log.timestamp}]</span>
                <span className={`${
                  log.type === 'error' ? 'text-red-600' : 
                  log.type === 'success' ? 'text-green-600' : 
                  'text-gray-700'
                }`}>
                  {log.message}
                </span>
              </div>
            ))
          )}
        </div>
      </div>

      {/* Backend Setup Instructions */}
      <div className="mt-6 p-4 bg-amber-50 rounded-lg border-l-4 border-amber-400">
        <h3 className="text-lg font-semibold text-amber-800 mb-2">ðŸ”§ Backend Setup Required for Real-Time Data</h3>
        <p className="text-amber-700 mb-3">To get real-time data, you need to run the backend service. Here's the setup:</p>
        
        <div className="bg-gray-800 text-green-400 p-4 rounded-lg font-mono text-sm mb-3">
          <div># Create backend directory</div>
          <div>mkdir emm11-backend && cd emm11-backend</div>
          <div><br/># Initialize Node.js project</div>
          <div>npm init -y</div>
          <div><br/># Install dependencies</div>
          <div>npm install express cors cheerio axios</div>
        </div>
        
        <p className="text-amber-700 text-sm">
          <strong>Next:</strong> I'll provide you the complete backend code that you can run locally to fetch real data from the UP Mining website.
        </p>
      </div>
    </div>
  );
};

export default eMM11DataExtractor;
